# 初始化商店插件
{{ if .Values.init.plugin.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "bkci.names.fullname" . }}-init-plugin
  labels: {{- include "bkci.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: init-plugin
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      labels: {{- include "bkci.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: init-plugin
    spec:
      containers:
        - name: init-plugin
          image: {{ include "common.images.image" ( dict "imageRoot" .Values.backendImage "global" $) }}
          imagePullPolicy: {{ .Values.backendImage.pullPolicy }}
          workingDir: /data/workspace/
          {{ $mysqlData := split ":" (include "bkci.mysqlAddr" .) }}
          command:
            - "/bin/bash"
            - "-c"
            - |
              services="store artifactory"
              for service in $services
              do
                until curl --connect-timeout 3 -m 1 -s "http://{{ include "bkci.names.fullname" . }}-$service.{{ .Release.Namespace }}.svc.cluster.local" > nohup
                do 
                  echo "waiting for {{ include "bkci.names.fullname" . }}-$service";
                  sleep 2;
                done
                echo "{{ include "bkci.names.fullname" . }}-$service is available";
              done 

              {{ range .Values.init.plugin.atoms }}
              atom_code={{ .code }}
              check_atom_url=http://{{ include "bkci.names.fullname" $ }}-store.{{ $.Release.Namespace }}.svc.cluster.local/api/service/pipeline/atom/codes/$atom_code/versions/1.0.0
              check_atom_response=$(curl -s $check_atom_url)
              if [ -z $(echo $check_atom_response | grep -o "atomCode") ]; then
                atom_url={{ .url }}
                atom_file=${atom_code}.zip
                curl -s $atom_url -o $atom_file -L
                if [ $? -eq 0 ]; then
                  curl "http://{{ include "bkci.names.fullname" $ }}-store.{{ $.Release.Namespace }}.svc.cluster.local/api/op/pipeline/atom/deploy" -H "X-DEVOPS-UID: admin" -F atomCode=$atom_code -F file=@$atom_file
                fi
              else
                  echo "atomCode exists"
              fi
              {{ end }}

              cat << EOF > atom.sql
              UPDATE devops_ci_store.T_ATOM SET DEFAULT_FLAG=true WHERE ATOM_CODE in ('uploadArtifact', 'uploadReport', 'AcrossProjectDistribution', 'downloadArtifact', 'run','CodeCCCheckAtom','checkout');
              UPDATE devops_ci_store.T_ATOM SET ATOM_STATUS=10 WHERE ATOM_CODE in ('buildArchiveGet', 'reportArchive', 'customizeArchiveGet','singleArchive');
              EOF

              cat << EOF > atom.redis
              SADD STORE_PUBLIC_FLAG_KEY:ATOM uploadArtifact
              SADD STORE_PUBLIC_FLAG_KEY:ATOM uploadReport
              SADD STORE_PUBLIC_FLAG_KEY:ATOM AcrossProjectDistribution
              SADD STORE_PUBLIC_FLAG_KEY:ATOM downloadArtifact
              SADD STORE_PUBLIC_FLAG_KEY:ATOM run
              SADD STORE_PUBLIC_FLAG_KEY:ATOM CodeCCCheckAtom
              SADD STORE_PUBLIC_FLAG_KEY:ATOM checkout
              EOF

              mysql -u{{- include "bkci.mysqlUsername" . }} -p{{- include "bkci.mysqlPassword" . }} -h{{ $mysqlData._0 }} -P{{ $mysqlData._1 }} < atom.sql
              redis-cli -h {{ include "bkci.redisHost" . }} -a {{ include "bkci.redisPassword" . }} -p {{ include "bkci.redisPort" . }} < atom.redis
      restartPolicy: OnFailure
{{- end -}}
